WEBVTT

00:00:05.400 --> 00:00:10.170
Hello everyone and welcome to the operations lecture this lecture we're just going to review some of

00:00:10.170 --> 00:00:15.090
the most important operations for pandas as well as learn some useful operations that we haven't gone

00:00:15.090 --> 00:00:15.930
over yet.

00:00:16.290 --> 00:00:19.850
Let's go ahead and jump to the Jupiter notebook to get started.

00:00:19.860 --> 00:00:20.160
All right.

00:00:20.160 --> 00:00:22.020
Here I am at the Jupiter notebook.

00:00:22.020 --> 00:00:26.520
I went ahead and just copied the first cell of the operation is the book that goes with this lecture

00:00:26.850 --> 00:00:28.830
in order to create this data frame.

00:00:28.830 --> 00:00:30.060
It just has three columns.

00:00:30.060 --> 00:00:37.940
Call 1 call to call 3 and it has an index of just numbers 0 1 2 3 and call 1 we have 4 digits and called

00:00:37.940 --> 00:00:38.520
2.

00:00:38.700 --> 00:00:40.550
We have four numbers here.

00:00:40.680 --> 00:00:46.460
But notice that 4 4 4 is repeated and then call 3 we just have four sets of strings.

00:00:46.470 --> 00:00:49.780
Let's talk about finding unique values in a data frame.

00:00:49.800 --> 00:00:56.460
There's three main useful methods concerned with finding unique values in a data frame.

00:00:56.460 --> 00:01:00.570
Imagine you wanted to find all the unique values in column two.

00:01:00.690 --> 00:01:07.590
The method we can use for that is just the unique method and this will return a higher rate of all the

00:01:07.590 --> 00:01:13.110
unique values in column two instead of actually wanting the array of unique values.

00:01:13.110 --> 00:01:16.960
Let's say you just actually want the number of values itself.

00:01:16.980 --> 00:01:18.600
Well there's two methods for this.

00:01:18.630 --> 00:01:24.930
You could just check the length of the array that gets returned and the sort of response to 3 or 3 unique

00:01:24.930 --> 00:01:26.210
values in column 2.

00:01:26.580 --> 00:01:31.740
But Halo's actually has a built in method for this and it's just and unique.

00:01:31.770 --> 00:01:34.670
And if I run the cell I get the same answer.

00:01:34.740 --> 00:01:35.190
All right.

00:01:35.280 --> 00:01:36.600
So we have unique.

00:01:37.110 --> 00:01:40.750
For actual returning an array of unique values and unique.

00:01:41.010 --> 00:01:46.890
If I want the number of unique values the less useful function I want to show you is value counts.

00:01:46.950 --> 00:01:52.470
And this basically means if you want a table of the unique values and how many times they show up you

00:01:52.470 --> 00:01:57.300
can just use value underscore counts as a method.

00:01:57.420 --> 00:02:00.440
Run this and this returns.

00:02:00.660 --> 00:02:03.980
How many times each unique value occurred in that column.

00:02:04.010 --> 00:02:09.810
In this case 4 4 4 occur twice and the other numbers occurred one time each.

00:02:09.810 --> 00:02:14.490
All right those are three very useful methods and you'll find yourself using them often in the exercises

00:02:14.490 --> 00:02:15.210
.

00:02:15.210 --> 00:02:18.390
Let's go ahead and talk about selecting data.

00:02:18.480 --> 00:02:24.300
We've already gone over conditional selection but I want to reemphasize just how important it is and

00:02:24.300 --> 00:02:26.420
how powerful it is as a tool.

00:02:26.610 --> 00:02:33.810
We have our data frame DMF and we can use conditional selection by passing in a conditional selection

00:02:33.810 --> 00:02:41.160
statement such as saying return the T.F. where column 1 is greater than 2.

00:02:41.250 --> 00:02:46.410
And this will return all the rows of the data frame where column 1 happens to be greater than 2.

00:02:46.500 --> 00:02:53.920
Remember that this command inside is essentially just a boolean series of False False True true.

00:02:54.000 --> 00:03:00.630
Now as a quick reminder if you want to combine conditions you can wrap these conditions in parentheses

00:03:02.070 --> 00:03:05.090
and then use either an ampersand or a pipe operator.

00:03:05.220 --> 00:03:07.140
Penny if you want and or or.

00:03:07.410 --> 00:03:15.090
And then you can say in other conditions such as where called to the you send has a string has a quality

00:03:15.090 --> 00:03:21.600
with 4 4 4 and the return just that last row 3 and there it is.

00:03:21.900 --> 00:03:23.000
OK.

00:03:23.000 --> 00:03:26.640
So just a quick reminder of how to select data using conditional selection.

00:03:26.910 --> 00:03:33.030
Now let's talk about the applied method the applied method is going to be one of the most powerful tools

00:03:33.120 --> 00:03:35.180
in your tool belt when using panderers.

00:03:35.400 --> 00:03:38.080
So let's go out and show you how it works.

00:03:38.190 --> 00:03:52.640
Magin we have a function DPF times 2 that takes in a value X and then returns let's say X times 2.

00:03:52.650 --> 00:03:54.920
All right a very simple function.

00:03:55.020 --> 00:04:01.740
Now you know that you can already grab for instance a column and call a built in function off of it

00:04:01.890 --> 00:04:05.660
such as the sum and that return the sum of the column.

00:04:05.700 --> 00:04:10.270
But what if you want to apply your own custom function such as times too well.

00:04:10.320 --> 00:04:11.840
Has the ability to do that.

00:04:11.880 --> 00:04:18.300
You can just say the column name and then apply and then you just pass in whatever function you want

00:04:18.300 --> 00:04:25.830
to apply this case we're going to go ahead and apply times to and this will broadcast that function

00:04:25.830 --> 00:04:29.990
to each element in that column 2 4 6 8.

00:04:30.000 --> 00:04:33.040
You can also apply built in functions such as length.

00:04:33.120 --> 00:04:37.820
For instance if we take a look at column three we had a bunch of strings.

00:04:37.860 --> 00:04:41.370
Let's say we wanted a column there were present at the length of each string.

00:04:41.370 --> 00:04:47.520
Well then we could just say apply in person Elyon and that returns the length of the stream which in

00:04:47.520 --> 00:04:50.880
this case was 3 for all those strings apply.

00:04:50.880 --> 00:04:54.530
It's going to be especially powerful when you combine it with land expressions.

00:04:54.570 --> 00:04:58.030
That way you don't need to take the whole time to define an entire function.

00:04:58.050 --> 00:05:02.580
If you're just going to apply it once for instance let's go ahead and make a lamp expression out of

00:05:02.580 --> 00:05:03.700
times 2.

00:05:03.870 --> 00:05:12.960
I'm going to go out and say Lamda X colon and then just x times 2 I'm going to apply this to call him

00:05:12.990 --> 00:05:13.920
to.

00:05:14.370 --> 00:05:16.160
Let's go ahead and see how this works.

00:05:16.820 --> 00:05:17.600
And there you have it.

00:05:17.680 --> 00:05:23.050
We were able to multiply each value in that column by two and we were able to do this without having

00:05:23.040 --> 00:05:25.220
to write an entire function for it.

00:05:25.240 --> 00:05:29.340
We just did this as a lamb the expression and this is the sort of thing you're going to be using all

00:05:29.340 --> 00:05:31.830
the time as you get more and more comfortable with pandas.

00:05:31.830 --> 00:05:36.150
This probably one of the most powerful features of pantless the ability to apply your own custom lambda

00:05:36.150 --> 00:05:38.280
expressions or functions.

00:05:38.280 --> 00:05:42.680
All right let's talk about removing Combs again.

00:05:42.690 --> 00:05:46.110
If we have if we want to let's say remove.

00:05:46.120 --> 00:05:47.580
Column one.

00:05:47.580 --> 00:05:55.360
We can just say ZF drop passen the column we want to draw c o l 1.

00:05:55.380 --> 00:06:00.250
And then remember since it's on the columns we have to specify access is equal to 1.

00:06:00.570 --> 00:06:04.070
And this will drop that column if we want this to occur in place.

00:06:04.200 --> 00:06:09.580
We have to specify in place equals true.

00:06:09.720 --> 00:06:11.800
Let's go ahead and not run that.

00:06:11.810 --> 00:06:17.790
So we retain our original data frame if you want to get the column and index names off a data frame

00:06:17.790 --> 00:06:18.090
.

00:06:18.090 --> 00:06:21.070
Those are actually just attributes of the data frame itself.

00:06:21.370 --> 00:06:29.050
Meaning you can say DF columns will return this kind of index object essentially just a list of column

00:06:29.040 --> 00:06:29.800
names.

00:06:29.810 --> 00:06:34.930
This is going to be especially useful when you're trying to index a column and maybe the spacing is

00:06:34.920 --> 00:06:37.500
weird or you can't quite figure out what the string is.

00:06:37.500 --> 00:06:40.940
You can just call DFA columns or whatever your data frame name is.

00:06:41.040 --> 00:06:46.170
And Ill return this list of column names and you can actually do the same thing for an index.

00:06:46.360 --> 00:06:49.540
You can say DFA index it'll give you information of the index.

00:06:49.770 --> 00:06:55.830
This case since it's a range index it actually just reports back the start stop and step size of the

00:06:55.830 --> 00:06:57.360
index.

00:06:57.370 --> 00:07:01.800
All right let's talk about sorting and ordering a data frame.

00:07:02.000 --> 00:07:07.880
Here we have deep breath and imagine you want to sort it by column 2.

00:07:08.130 --> 00:07:13.890
Essentially we want 4 4 4 and then 4 for 4 again before we see 5 5 5 and 6 6.

00:07:14.040 --> 00:07:17.330
We can use sort values in order to do this.

00:07:18.150 --> 00:07:22.750
You called DMF saur underscore values.

00:07:22.920 --> 00:07:28.200
And then as an argument you say by now we've checked shift tab here we can say bye and you could order

00:07:28.200 --> 00:07:32.280
this off of either the rows or the columns.

00:07:32.280 --> 00:07:36.910
But essentially you just Pessin as an argument the column you want to sort by.

00:07:36.960 --> 00:07:43.580
So I want to sort this by column 2 and you can say just column to as such shift enter.

00:07:43.600 --> 00:07:50.280
And now I have sort of state of frame by column to know how the index stays attached to the row.

00:07:50.310 --> 00:07:52.520
So you don't ever lose that information there.

00:07:52.920 --> 00:07:59.220
And that's the same thing as just saying by column two same thing because it expects by to be the first

00:07:59.230 --> 00:08:00.350
argument.

00:08:01.020 --> 00:08:01.440
All right.

00:08:01.830 --> 00:08:04.370
Let's talk about just a couple of more useful operations.

00:08:04.530 --> 00:08:12.410
A really useful method to find no values in your data frame is the DFT is null and this will return

00:08:12.410 --> 00:08:17.940
a data frame of booleans indicating whether or not the value was null or not.

00:08:17.940 --> 00:08:23.340
In this case we get a boolean of all falses because we have known nulls in our data frame.

00:08:23.350 --> 00:08:23.730
All right.

00:08:23.740 --> 00:08:29.690
Now let's finally talk about one last function or method in pantless called the pivot table.

00:08:29.940 --> 00:08:33.890
And this methodology will be really familiar for Advanced Excel users.

00:08:34.000 --> 00:08:40.340
I'm going to go ahead and copy and paste some code from the note book to create a new data frame.

00:08:41.080 --> 00:08:44.210
We go out and check out the state of frame we have something that looks like this.

00:08:44.250 --> 00:08:46.820
We have a b c and d columns.

00:08:47.460 --> 00:08:54.010
And notice here that we have repeating values in both the A column B column and the C column a column

00:08:54.000 --> 00:08:57.850
has Foo's and bars B has one twos.

00:08:58.050 --> 00:09:04.950
C has X's and wise and then D has some integer values you can use DFT pivot table.

00:09:04.950 --> 00:09:09.600
Create a pivot table and if you're not familiar with Pivot Tables I wouldn't worry about this too much

00:09:09.960 --> 00:09:15.120
but if you are maybe an Excel user who is familiar with Pivot Tables Hopefully you'll find this functionality

00:09:15.120 --> 00:09:15.760
useful.

00:09:16.000 --> 00:09:21.810
Basically where we're going to do for not excel users is just create a multi index out of this table

00:09:22.170 --> 00:09:23.940
or a data frame.

00:09:24.420 --> 00:09:33.600
The method to do this is give it underscore table and pivot underscore table takes in three main arguments

00:09:34.000 --> 00:09:37.450
the values the index and the columns.

00:09:37.500 --> 00:09:43.050
In this case let's go ahead and indicate that the values we want in our table are these values.

00:09:43.060 --> 00:09:44.250
This is what we actually want.

00:09:44.250 --> 00:09:47.270
The data frame data points to be made up of.

00:09:47.280 --> 00:09:52.140
So I'm going to say values is equal to the D column.

00:09:53.040 --> 00:09:59.950
And then I will set my index to be equal to the A column and the B column and that's basically going

00:09:59.940 --> 00:10:03.200
to make a and b into a multilevel index.

00:10:03.210 --> 00:10:09.760
So going to passenger list then since it's more than one column index and B.

00:10:09.780 --> 00:10:14.950
And then finally I want my actual columns to be defined by the C column.

00:10:15.070 --> 00:10:21.810
This case just see that I pass that in as a list here and note that I'm saying See it's going to be

00:10:21.820 --> 00:10:22.320
the column.

00:10:22.330 --> 00:10:25.860
So I should end up with a column for X and a column for y.

00:10:25.870 --> 00:10:28.360
Let's go ahead and see how this works.

00:10:28.470 --> 00:10:34.390
I'm going to run this one more time here so we can compare the original data frame versus the pivot

00:10:34.380 --> 00:10:36.930
table that I'm about to create.

00:10:36.930 --> 00:10:38.970
All right so I ran this pivot table command.

00:10:39.180 --> 00:10:41.220
And let's go in and compare the two.

00:10:41.400 --> 00:10:47.580
Looks like a created index out of those and B columns so that makes sense lexically a bar and foo and

00:10:47.590 --> 00:10:54.780
then one and two repeated then the actual columns I want it where the values in this case just X and

00:10:54.780 --> 00:10:58.410
Y and the actual data point values were the D columns.

00:10:58.600 --> 00:11:03.820
No I do have some no values here because there were no values that matched up for that specific point

00:11:03.820 --> 00:11:04.090
.

00:11:04.200 --> 00:11:11.130
Meaning if I looked back at the original data frame there is no value that goes with bar to x.

00:11:11.130 --> 00:11:16.130
So if you look here you won't find barrer to X. you'll only find part 2 y.

00:11:16.750 --> 00:11:19.550
And similarly for food to y.

00:11:19.600 --> 00:11:25.850
There is no food to why there's only food to X and that's why we had to fill in no values here.

00:11:25.920 --> 00:11:26.500
OK.

00:11:26.560 --> 00:11:31.320
Feel free to post the Q&A if you have more questions on Pivot Tables or want some more resources for

00:11:31.330 --> 00:11:32.950
examples on Pivot Tables.

00:11:32.940 --> 00:11:34.870
We won't really use these that often in the course.

00:11:34.870 --> 00:11:39.630
In fact there's only really one exercise question later on where we're working with heat maps as far

00:11:39.630 --> 00:11:41.180
as how to use the pivot tables.

00:11:41.250 --> 00:11:45.930
But for now only concern yourself with them if you're already familiar pivot tables from something like

00:11:46.000 --> 00:11:46.970
Excel.

00:11:47.110 --> 00:11:47.770
OK.

00:11:47.940 --> 00:11:50.100
I hope some of these operations were useful to you.

00:11:50.130 --> 00:11:55.340
They see just a grab bag of useful functions and methods that are available to you in panas.

00:11:55.470 --> 00:12:01.440
You can go ahead and reference the pandas operations lecture notebook that's underneath the panderers

00:12:01.470 --> 00:12:02.510
folder.

00:12:02.520 --> 00:12:04.580
Thanks everyone and I'll see at the next lecture